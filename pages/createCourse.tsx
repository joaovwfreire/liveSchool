import { useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { withIdentity } from '../components/Authenticator'
import { useUploader } from '@w3ui/react-uploader'
import axios from 'axios'

import toast from 'react-hot-toast';


const Home: NextPage = () => {
  const [courseName, setCourseName] = useState<any>("");
  const [courseDescription, setCourseDescription] = useState<any>("");
  const [teacher, setTeacher] = useState<any>("");
  const [amount, setAmount] = useState<any>("");

  const [{ storedDAGShards }, uploader] = useUploader()
  const [file, setFile] = useState<any>(null)
  const [dataCid, setDataCid] = useState<any>('')
  const [status, setStatus] = useState<any>('')
  const [error, setError] = useState<any>(null)

  function onChangeCourse (e: any) {
    setCourseName(e.target.value)
  };
  function onChangeDescription (e: any) {
    setCourseDescription(e.target.value)
  };
  function onChangeTeacher (e: any) {
    setTeacher(e.target.value)
  };
  function onChangeAmount (e: any) {
    setAmount(e.target.value)
  };

  const Uploading = ({ file, storedDAGShards }: any) => (
    <div className='flex items-center'>
      <div className='spinner mr3 flex-none' />
      <div className='flex-auto'> 
        <p className='truncate'>Uploading DAG for {file.name}</p>
        {storedDAGShards.map(({ cid, size }: any ) => (
          <p key={cid.toString()} className='f7 truncate'>
            {cid.toString()} ({size} bytes)
          </p>
        ))}
      </div>
    </div>
  )
  
  const Errored = ({ error }: any) => (
    <div>
      <h1 className='near-white'>⚠️ Error: failed to upload file: {error.message}</h1>
      <p>Check the browser console for details.</p>
    </div>
  )
  
  const Done = ({ file, dataCid, storedDAGShards }: any) => (
    <div>
      <h1 className='near-white'>Done!</h1>
      <p className='f6 code truncate'>{dataCid.toString()}</p>
      <p><a href={`https://w3s.link/ipfs/${dataCid}`} className='blue' target='blank'>View {file.name} on IPFS Gateway.</a></p>
      <p className='near-white'>Chunks ({storedDAGShards.length}):</p>
      {storedDAGShards.map(({ cid, size }: any) => (
        <p key={cid.toString()} className='f7 truncate'>
          {cid.toString()} ({size} bytes)
        </p>
      ))}
    </div>
  )

  if (!uploader) return null
  
    const handleUploadSubmit = async(e: any) => {
      e.preventDefault()
      try {
        setStatus('uploading')
        const cid = await uploader.uploadFile(file)
        setDataCid(cid)
      } catch (err) {
        console.error(err)
        setError(err)
      } finally {
        setStatus('done')
      }
    }

const createCourse = async () => {
  toast.loading("Attempting to create a new course.")
  await axios({
    method: 'post',
    url: '/api/createCourse',
    data: {
      course: courseName,
      description: courseDescription,
      amount: amount,
      teacher_wallet: teacher,
      url: `https://${dataCid}.ipfs.w3s.link/`
    }
   }).then((response: any)=>{
   
    toast.success(`Course succesfully created! You may now distribute the access passes to your students from the Control Panel.`)
    

  }).catch((e: any) =>{
    
    //toast.error(e)
  })
}
  
    

  

    
  return (
    
    <div className='bg-slate-100 mt-5'>
      <Head>
        <title>live School</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <div className='box'>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </div>
        <div className='box2'>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </div>
<div className="card flex-shrink-0 w-full max-w-3xl shadow-2xl bg-base-100">
      <div className="card-body">
        <div className='card-title'>Course Creation Form</div>
        <div className="form-control">
          <label className="label">
            <span className="label-text text-lg">Course Name</span>
          </label>
          <input type="text" placeholder="Name" className="input input-bordered input-primary" onChange={onChangeCourse}/>
        </div>
        <div className="form-control">
            <label className="label">
                <span className="label-text text-lg">Description</span>
            </label>
            <textarea className="textarea textarea-accent" placeholder="Description" onChange={onChangeDescription}></textarea>
        </div>

        

<div className="form-control">
          <label className="label">
            <span className="label-text text-lg">Teacher Wallet</span>
          </label>
          <input type="text" placeholder="0x...0fa3bc" className="input input-bordered input-primary" onChange={onChangeTeacher}/>
        </div>
        <div className="form-control">
          <label className="label">
            <span className="label-text text-lg">Amount</span>
          </label>
          <input type="text" placeholder="1 - 50" className="input input-bordered input-accent" onChange={onChangeAmount} />
        </div>
        {status == '' && 
        <form onSubmit={handleUploadSubmit}>
        <div className='db mb3'>
        <label className="label"><span className="label-text text-lg">Pick a file for access pass NFT</span>
        </label>
          <input id='file' className='db pa2 w-100 ba br2 file-input file-input-bordered w-full max-w-xs' type='file' onChange={e => setFile(e.target.files[0])} required />
        </div>
        <button type='submit' className='ph3 pv2 btn mt-2'>Upload to W3 Storage</button>
      </form>}
        
      {status === 'uploading' &&
      <Uploading file={file} storedDAGShards={storedDAGShards} />
    }
  
    {status === 'done' &&
      
        <Done file={file} dataCid={dataCid} storedDAGShards={storedDAGShards} />
     
      
    }
      
        <div className="form-control mt-6">
          <label htmlFor="my-modal-3" className="btn ">Proceed to order review  <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" className="bi bi-arrow-right-short" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8z"/>
</svg></label>
        </div>
      </div>
    </div>
    <input type="checkbox" id="my-modal-3" className="modal-toggle" />
<div className="modal">
  <div className="modal-box h-11/12 max-h-5xl relative">
    <label htmlFor="my-modal-3" className="btn btn-sm btn-circle absolute right-2 top-2">✕</label>
    <h3 className="text-lg font-bold">Review course creation.</h3>
    <p className="py-4 mb-1">Please check the details before ordering course placement!</p>
    <p><p className='font-bold'>Course Name:</p>   {courseName}</p>
    <p><p className='font-bold'>Description:</p> {courseDescription}</p>
    <p><p className='font-bold'>Teacher:</p> {teacher}</p>
    <p><p className='font-bold'>Amount to mint:</p> {amount}</p>
    { dataCid != null &&
    <a href={`ipfs://${dataCid}`} target='blank'><p className='font-bold'>Access pass:</p> {`https://w3s.link/ipfs/${dataCid}`}</a>}
    
    <div className="form-control mt-5">

  <button className='btn place-self-end mx-3' onClick={createCourse}>Agree and create course</button>
</div>
    

  </div>
</div>
      </main>

    </div>
  );
};

export default withIdentity(Home);
